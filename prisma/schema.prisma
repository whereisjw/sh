// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique @db.VarChar(50)
  email           String?     @unique
  name            String
  avatar          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          Token[]
  products        Product[]
  Like            Like[]
  Post            Post[]
  Answer          Answer[]
  Wondering       Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receviedReviews Review[]    @relation(name: "receviedReviews")

  Review   Review[]
  Sale     Sale[]
  Purchase Purchase[]
  Record   Record[]
  Stream   Stream[]
  Message  Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  category    String     @db.VarChar(20)
  image       String     @db.VarChar(255)
  name        String     @db.VarChar(20)
  price       String     @db.VarChar(20)
  description String     @db.VarChar(200)
  Like        Like[]
  Sale        Sale[]
  Purchase    Purchase[]
  Record      Record[]

  @@index([userId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@index([productId])
  @@index([userId])
}

model Post {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  question  String      @db.MediumText
  lat       Float?
  lng       Float?
  Answer    Answer[]
  Wondering Wondering[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  answer    String   @db.MediumText

  @@index([postId])
  @@index([userId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int

  @@index([postId])
  @@index([userId])
}

model Review {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  review      String   @db.MediumText
  createBy    User     @relation(name: "writtenReviews", fields: [createById], references: [id])
  createById  Int
  createFor   User     @relation(name: "receviedReviews", fields: [createForId], references: [id])
  createForId Int
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  score       Int      @default(1)

  @@index([createById])
  @@index([createForId])
  @@index([userId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@index([productId])
  @@index([userId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@index([productId])
  @@index([userId])
}

model Record {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  kind      Kind

  @@index([productId])
  @@index([userId])
}

enum Kind {
  Sale
  Like
  Purchase
}

model Stream {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String    @db.MediumText
  price       Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  Message     Message[]

  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id])
  streamId  Int

  @@index([streamId])
  @@index([userId])
}
